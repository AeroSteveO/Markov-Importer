/*
* To change this license header, choose License Headers in Project Properties.
* To change this template file, choose Tools | Templates
* and open the template in the editor.
*/

package markovimporter;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.regex.Pattern;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import org.jborg.JBorg;
import org.w3c.dom.Element;

/**
 *
 * @author Stephen
 * Imports Xchat IRC logs into jborg, a java port of seeborg
 * 
 * Requirements:
 * - APIs
 *    JBORG (https://code.google.com/p/jborg/)
 * - Custom Objects
 *    N/A
 * - Linked Classes
 *    N/A
 *
 */
public class MarkovImporter {
    static ArrayList<String> botlist = null;
    static JBorg Borg = new JBorg(1,10);
    
    
    /**
     * @param args the command line arguments
     *             of which there are none
     * @throws java.io.FileNotFoundException
     */
    public static void main(String[] args) throws FileNotFoundException {
//        ArrayList<String> rawLogs = getLogs(getLogList());
//        ArrayList<String> removedStamps = removeTimeStamp(rawLogs);
//        ArrayList<String> removedNicks = parseBadLines(removedStamps);
        
        
        ArrayList<File> fileList = getLogFileList();
        
        ArrayList<String> xChatLogs = new ArrayList<>();   // Specifically logs generated by XCHAT
        ArrayList<String> pircBotLogs = new ArrayList<>(); // Specifically logs generated by my Logger listener from pircbotx
        ArrayList<String> unParsedLogs = new ArrayList<>();// Any other log file that isn't included above
        
        
        for (int i=0;i<fileList.size();i++){
            if (fileList.get(i).getName().endsWith(".log"))
                xChatLogs.addAll(loadLogFile(fileList.get(i)));
            else if (fileList.get(i).getName().endsWith(".plog"))
                pircBotLogs.addAll(loadLogFile(fileList.get(i)));
            else
                unParsedLogs.addAll(loadLogFile(fileList.get(i)));
        }
        
        ArrayList<String> parsedLogs = parseBadLines(removeTimeStamp(xChatLogs));//The heart of the parsing
        
        
        
        for (int i=0;i<parsedLogs.size();i++)
            Borg.learn(parsedLogs.get(i));
        
        
//        System.out.printf("Parsed %d lines\n", rawLogs.size());
//        for (int i=0;i<3;i++)
//            System.out.printf(rawLogs.get(i)+"\n");
//
//        System.out.printf("Parsed %d lines\n", removedStamps.size());
//        for (int i=0;i<3;i++)
//            System.out.printf(removedStamps.get(i)+"\n");
        
        System.out.printf("Parsed %d lines\n", parsedLogs.size()); //Printing out some stats on the imported lines
//        for (int i=0;i<3;i++)
//            System.out.printf(parsedLogs.get(i)+"\n");//Printing out some example lines
        
        File oddFile = new File("ImportedMarkov");
        Borg.saveWords(oddFile);
//        for (int i=0;i<parsedLogs.size();i++)
//            System.out.println(parsedLogs.get(i));
    }
    
    public static ArrayList<String> getBotList() throws FileNotFoundException{
        try{
            ArrayList<String> botlist = new ArrayList<String>();
            File fXmlFile = new File("SettingMarkov.xml");
            DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
            Element eElement = (Element) dBuilder.parse(fXmlFile).getElementsByTagName("ignorebots").item(0);
            for (int i=0;i<eElement.getElementsByTagName("bot").getLength();i++)
            {
                botlist.add(eElement.getElementsByTagName("bot").item(i).getTextContent());
            }
            return (botlist);
        }
        catch (Exception ex) {
            ex.printStackTrace();
            return(null);
        }
    }
    
    public static boolean isBot(String nick) throws FileNotFoundException {
        boolean bot = false;
        if (botlist==null){
            botlist = getBotList();
        }
        int i=0;
        while(bot==false&&i<botlist.size()){
            if (nick.trim().equalsIgnoreCase(botlist.get(i))){
                bot=true;
            }
            i++;
        }
        return(bot);
    }
    
//    public static ArrayList<String> getLogList() throws FileNotFoundException{
//        try{
//            ArrayList<String> IrcLogList = new ArrayList<String>();
//            File fXmlFile = new File("SettingMarkov.xml");
//            DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
//            DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
//            Element eElement = (Element) dBuilder.parse(fXmlFile).getElementsByTagName("importsettings").item(0);
//            for (int i=0;i<eElement.getElementsByTagName("file").getLength();i++)
//            {
//                IrcLogList.add(eElement.getElementsByTagName("file").item(i).getTextContent());// +".log" to support multiple filetypes and log import methods, the file extension will be stored in the XML
//            }                                                                                  // File extension will determine parsing method
//            return (IrcLogList);
//        }
//        catch (Exception ex) {
//            ex.printStackTrace();
//            return(null);
//        }
//    }
//    public static ArrayList<String> getLogs(ArrayList<String> fileNameList) throws FileNotFoundException{
//        ArrayList<String> log = new ArrayList<String>();
//        String fileName = null;
//        
//        for(int i=0;i<fileNameList.size();i++){
//            try{
//                fileName = fileNameList.get(i);
//                
//                Scanner wordfile = new Scanner(new File(fileName));
//                while (wordfile.hasNextLine()){
//                    log.add(wordfile.nextLine().trim());
//                }
//                wordfile.close();
//            } catch (FileNotFoundException ex) {
//                ex.printStackTrace();
////                System.out.printf(fileName+"\n");
//                return null;
//            }
//        }
//        return (log);
//    }
    public static ArrayList<String> removeTimeStamp(ArrayList<String> rawlog) throws FileNotFoundException{
        ArrayList<String> log = new ArrayList<String>();
        for (int i = 0;i<rawlog.size();i++)
            if (!rawlog.get(i).startsWith("****")){
                String[] line = rawlog.get(i).split(" ");
                if (line.length>4){
                    if (!line[3].startsWith("*")){
                        String formedLine = "";
                        for(int c = 3;c<line.length;c++){
                            formedLine = formedLine +" "+ line[c];
                        }
                        log.add(formedLine.trim());
                    }
                }
            }
        return(log);
    }
    
    public static ArrayList<String> parseBadLines(ArrayList<String> rawlog) throws FileNotFoundException{
        ArrayList<String> log = new ArrayList<String>();
        for (int i = 0;i<rawlog.size();i++){
            String[] line = rawlog.get(i).replaceAll("\\s+"," ").split(" ");
            String formedLine;
            if (line.length>2){
                int startLoop;
                if(Pattern.matches("\\[[0-9][0-9]:[0-9][0-9]:[0-9][0-9]\\]",line[1])){
                    formedLine = line[2];
                    startLoop = 3;
                }
                else{
                    formedLine = line[1];
                    startLoop = 2;
                }
                for(int c = startLoop;c<line.length;c++){
                    formedLine = formedLine +" "+ line[c];
                }
                
                if (line[0].length()>2){
                    String nick=rawlog.get(i).trim().replaceAll("\\s+"," ").split(" ")[0].replaceAll("(<|>|\\||-)","");
                    
                    if (!isBot(nick)&&
                            !formedLine.startsWith("!")&&
                            !formedLine.startsWith(".")&&
                            !formedLine.toLowerCase().startsWith("wheatley, ")&&
                            !Pattern.matches("[a-zA-Z_0-9]+?", formedLine.toLowerCase())&&
                            !Pattern.matches("[a-zA-Z]{1}", formedLine)&&
                            !Pattern.matches("(matraptor|matrapter)[0-9]{0,}", nick.toLowerCase())&&
                            !formedLine.toLowerCase().startsWith("the tv listings for ")&&
                            !Pattern.matches("[a-zA-Z_0-9]+\\++", formedLine.toLowerCase())){
                        
                        if (!containsIgnoreCase(log,formedLine.trim()))
                            log.add(formedLine.trim());
                    }
                }
            }
        }
        return(log);
    }
    
    public static ArrayList<File> getLogFileList(){
        
        File folder = new File("logs/");
        File[] listOfFilesAndFolders = folder.listFiles();
        ArrayList<File> listOfFiles = new ArrayList<>();// = new File[];
        
        for (int i = 0; i < listOfFilesAndFolders.length; i++) {
            
            if (listOfFilesAndFolders[i].isFile()) {
                listOfFiles.add(listOfFilesAndFolders[i]);
                
            } else if (listOfFilesAndFolders[i].isDirectory()) {
                System.out.println("Directory " + listOfFilesAndFolders[i].getName());
            }
        }
        return listOfFiles;
    }
    
    public static ArrayList<String> loadLogFile(File file) {
        try{
            Scanner wordfile = new Scanner(file);
            ArrayList<String> wordls = new ArrayList<String>();
            while (wordfile.hasNext()){
                wordls.add(wordfile.nextLine());
            }
            wordfile.close();
            return (wordls);
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
            return null;
        }
    }
    
    public static boolean containsIgnoreCase(ArrayList<String> a, String b){
        
        for (int i=0;i<a.size();i++){
            
            if (a.get(i).equalsIgnoreCase(b)){
                return(true);
            }
        }
        return (false);
    }
}